// <auto-generated />
using System;
using MicroBase.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace MicroBase.Entity.Migrations
{
    [DbContext(typeof(MicroDbContext))]
    partial class MicroDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MicroBase.Entity.Accounts.ExternalAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("ExternalAccountId")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("RAW(16)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId")
                        .IsUnique();

                    b.ToTable("IdentityUser_ExternalAccounts");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<DateTime?>("EmailConfirmDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<bool>("IsDefaultPassword")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool?>("IsSystemLocked")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("LastLoginIpAddress")
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("LockedDescription")
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR2(512)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime?>("PhoneConfirmDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ReferralAccountId")
                        .HasColumnType("RAW(16)");

                    b.Property<string>("ReferralId")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("UserNameKana")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<string>("Via")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ReferralAccountId");

                    b.ToTable("IdentityUsers", (string)null);
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserACGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("RAW(16)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<Guid?>("RoleGroupId")
                        .HasColumnType("RAW(16)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("RoleGroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUser_AC_Groups");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<Guid?>("IdentityUserId")
                        .HasColumnType("RAW(16)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<string>("Via")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("IdentityUser_Activities");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserMetaData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR2(1000)");

                    b.Property<bool>("AllowAppNotification")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool>("AllowEmailNotification")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(5000)
                        .HasColumnType("NCLOB");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("DefaultLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("RAW(16)");

                    b.Property<short?>("Gender")
                        .HasColumnType("NUMBER(3)");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("RAW(16)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("NormalizedWalletAddress")
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR2(512)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("RAW(16)");

                    b.Property<int>("ReferralCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("ReferralMonthCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("ReferralWeekCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("WalletAddress")
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR2(512)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId")
                        .IsUnique();

                    b.HasIndex("ProvinceId");

                    b.ToTable("IdentityUser_MetaData");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("BaseRoute")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR2(512)");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<Guid?>("IdentityUserRoleGroupId")
                        .HasColumnType("RAW(16)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("Route")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserRoleGroupId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("\"NormalizedName\" IS NOT NULL");

                    b.ToTable("IdentityUser_AC_Roles", (string)null);
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserRoleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<bool>("AllowFullAccess")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser_AC_RoleGroups");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserRoleGroupMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<Guid>("RoleGroupId")
                        .HasColumnType("RAW(16)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUser_AC_RoleGroup_Maps");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserTwoFA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<Guid>("IdentityUserId")
                        .HasColumnType("RAW(16)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Setting")
                        .HasMaxLength(5000)
                        .HasColumnType("NCLOB");

                    b.Property<string>("TwoFactorService")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("IdentityUser_TwoFA");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.SystemMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("CssClass")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("NUMBER(10)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("FontIcon")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<string>("ImageUrlIcon")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Route")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<string>("Target")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("System_Menus");
                });

            modelBuilder.Entity("MicroBase.Entity.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR2(512)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("MicroBase.Entity.LocalizationKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Content")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.HasKey("Id");

                    b.ToTable("Localization_Keys");
                });

            modelBuilder.Entity("MicroBase.Entity.Localtions.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR2(512)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("RAW(16)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("MicroBase.Entity.Localtions.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR2(512)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("Order")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("MicroBase.Entity.SiteSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<bool?>("BoolValue")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<string>("GroupKey")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<string>("ModelField")
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR2(512)");

                    b.Property<bool>("ModelFieldIsArray")
                        .HasColumnType("NUMBER(1)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<decimal?>("NumberValue")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<int>("Order")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("StringValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("RAW(16)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("RAW(16)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Value")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserTokens", (string)null);
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.ExternalAccount", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUser", "IdentityUser")
                        .WithOne("ExternalAccount")
                        .HasForeignKey("MicroBase.Entity.Accounts.ExternalAccount", "IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUser", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUser", "ReferralAccount")
                        .WithMany()
                        .HasForeignKey("ReferralAccountId");

                    b.Navigation("ReferralAccount");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserACGroup", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUser", "IdentityUser")
                        .WithMany("IdentityUserACGroups")
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroBase.Entity.Accounts.IdentityUserRoleGroup", "IdentityUserRoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupId");

                    b.HasOne("MicroBase.Entity.Accounts.IdentityUserRole", "IdentityUserRole")
                        .WithMany("IdentityUserACGroups")
                        .HasForeignKey("RoleId");

                    b.Navigation("IdentityUser");

                    b.Navigation("IdentityUserRole");

                    b.Navigation("IdentityUserRoleGroup");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserActivity", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserMetaData", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUser", "IdentityUser")
                        .WithOne("IdentityUserMetaData")
                        .HasForeignKey("MicroBase.Entity.Accounts.IdentityUserMetaData", "IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroBase.Entity.Localtions.Province", "Province")
                        .WithMany("IdentityUserMetaDatas")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("IdentityUser");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserRole", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUserRoleGroup", null)
                        .WithMany("IdentityUserRoles")
                        .HasForeignKey("IdentityUserRoleGroupId");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserRoleGroupMap", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUserRoleGroup", "IdentityUserRoleGroup")
                        .WithMany("IdentityUserRoleGroupMaps")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroBase.Entity.Accounts.IdentityUserRole", "IdentityUserRole")
                        .WithMany("IdentityUserRoleGroupMaps")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUserRole");

                    b.Navigation("IdentityUserRoleGroup");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserTwoFA", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUser", "IdentityUser")
                        .WithMany("IdentityUserTwoFAs")
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.SystemMenu", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.SystemMenu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MicroBase.Entity.Localtions.District", b =>
                {
                    b.HasOne("MicroBase.Entity.Localtions.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroBase.Entity.Accounts.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MicroBase.Entity.Accounts.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUser", b =>
                {
                    b.Navigation("ExternalAccount");

                    b.Navigation("IdentityUserACGroups");

                    b.Navigation("IdentityUserMetaData");

                    b.Navigation("IdentityUserTwoFAs");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserRole", b =>
                {
                    b.Navigation("IdentityUserACGroups");

                    b.Navigation("IdentityUserRoleGroupMaps");
                });

            modelBuilder.Entity("MicroBase.Entity.Accounts.IdentityUserRoleGroup", b =>
                {
                    b.Navigation("IdentityUserRoleGroupMaps");

                    b.Navigation("IdentityUserRoles");
                });

            modelBuilder.Entity("MicroBase.Entity.Localtions.Province", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("IdentityUserMetaDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
